/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.01;

vertices
(
// bump
    ( 0     0.375  -0.00325 )  //0
    ( 1     0.375  -0.00325 )  //1
    ( 1     4.0    -0.0349  )  //2
    ( 0     4.0    -0.0349  )  //3
    ( 0     0.375   0.00325 )  //4
    ( 1     0.375   0.00325 )  //5
    ( 1     4.0     0.0349  )  //6
    ( 0     4.0     0.0349  )  //7
// pre bump
    (-3.2   0.375  -0.00325 )  //8
    (-3.2   4      -0.0349  )  //9
    (-3.2   0.375   0.00325 )  //10 
    (-3.2   4       0.0349  )  //11  
// post bump
    ( 4.4   0.375  -0.00325 )  //12
    ( 4.4   4      -0.0349  )  //13  
    ( 4.4   0.375   0.00325 )  //14
    ( 4.4   4       0.0349  )  //15

);

blocks
(
    hex (0  1  2 3  4  5  6  7 ) ( 181 81 1) simpleGrading ( 1 60 1)
    hex (8  0  3 9 10  4  7 11 ) ( 181 81 1) simpleGrading ( 1 60 1)
    hex (1 12 13 2  5 14 15  6 ) ( 181 81 1) simpleGrading ( 1 60 1)
);

edges
(
// include bump arcs
   arc 0 1 (0.5 0.46875 -0.00325) 
   arc 4 5 (0.5 0.46875  0.00325) 
/*
// include cylinder arcs 
   arc  8 10 (-3.2 0.46875  0)
   arc  0  4 ( 0   0.46875  0)
   arc  1  5 ( 1   0.46875  0)
   arc 12 14 ( 4.4 0.46875  0)
*/
);

boundary
(
    my-velocity-inlet
    {
        type patch;
        faces
        (
	   (10 11 9 8)
        );
    }
    my-pressure-outlet
    {
        type patch;
        faces
        (
           (14 12 13 15)
        );
    }
    my-wall
    {
        type wall;
        faces
        (
           ( 8   0  4 10)
           ( 4   0  1  5)
           ( 5   1 12 14)
        );
    }
    frontLeftPlane
    {
	type			cyclicAMI;
	neighbourPatch		backLeftPlane;
	transform		rotational;
	rotationAxis		(1 0 0);
	rotationCentre		(0 0 0);
	matchTolerance		1.0e-3;
	faces
	(
		 (10  4  7 11)
	);
    }
    frontRightPlane
    {
        type                    cyclicAMI;
        neighbourPatch          backRightPlane;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 5 14 15  6)
        );
    }
    frontBump
    {
        type                    cyclicAMI;
        neighbourPatch          backBump;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 4  5  6  7)
        );
    }
    backLeftPlane
    {
        type                    cyclicAMI;
        neighbourPatch          frontLeftPlane;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 8  9  3  0)
        );
    }
    backRightPlane
    {
        type                    cyclicAMI;
        neighbourPatch          frontRightPlane;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 1 2 13 12)
        );
    }
    backBump
    {
        type                    cyclicAMI;
        neighbourPatch          frontBump;
        transform               rotational;
        rotationAxis            (1 0 0);
        rotationCentre          (0 0 0);
        matchTolerance          1.0e-3;
        faces
        (
                 ( 0  3  2  1)
        );
    }
/*
    frontAndBackPlanes
    {
        type  wedge;  //empty;
        faces
        (
            ( 0  3  2  1)
            ( 4  5  6  7)
            ( 8  9  3  0)
            (10  4  7 11)
            ( 1  2 13 12)
            ( 5 14 15  6)
        );
    }
*/
    freeSurf
    {   
        type symmetryPlane;
        faces
        (
            (11  7  3  9)
            ( 7  6  2  3)
            ( 6 15 13  2)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
